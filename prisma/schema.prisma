datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  role          String    @default("USER")
  image         String?
  dni           String?   @unique
  dob           DateTime?
  country       String?
  province      String?
  address       String?
  addressNumber String?
  apartment     String?
  status        String    @default("pending") // approved, rejected, or pending
  viewedDate    DateTime?
  dniImage      DNIImage?
  accounts      Account[]
  orders        Order[]

  @@index([dni]) // Add index to dni for fast lookup
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model DNIImage {
  id     String @id @default(cuid())
  front   Bytes
  reverse Bytes?
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id             String    @id @default(cuid())
  status         String    @default("Abierta") // Abierta, Cerrada, Rechazada
  closedDate     DateTime?
  amountSent     Float
  amountReceived Float
  sendingBank    String
  userId         String
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}
